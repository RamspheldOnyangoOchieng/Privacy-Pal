input {
  # File input for application logs
  file {
    path => "/var/log/privacy-pal/*.log"
    type => "application"
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }

  # Beats input for system metrics
  beats {
    port => 5044
    type => "beats"
  }

  # HTTP input for direct log submission
  http {
    port => 8080
    type => "http"
  }

  # TCP input for syslog
  tcp {
    port => 5000
    type => "syslog"
    codec => json_lines
  }

  # UDP input for syslog
  udp {
    port => 5000
    type => "syslog"
    codec => json_lines
  }
}

filter {
  # Common filter for all logs
  if [type] == "application" {
    # Parse timestamp
    date {
      match => [ "timestamp", "ISO8601" ]
      target => "@timestamp"
    }

    # Add environment information
    mutate {
      add_field => {
        "environment" => "%{ENV}"
        "application" => "privacy-pal"
      }
    }

    # Parse JSON fields
    if [message] =~ /^{.*}$/ {
      json {
        source => "message"
        target => "parsed_json"
      }
    }

    # Extract error information
    if [level] == "ERROR" {
      mutate {
        add_tag => [ "error" ]
      }
    }

    # Extract performance metrics
    if [message] =~ /performance/ {
      grok {
        match => { "message" => "%{GREEDYDATA:metric_name}: %{NUMBER:metric_value}" }
      }
    }
  }

  # System metrics filter
  if [type] == "beats" {
    # Parse system metrics
    if [metricset][name] == "system" {
      mutate {
        add_field => {
          "metric_type" => "system"
        }
      }
    }

    # Parse process metrics
    if [metricset][name] == "process" {
      mutate {
        add_field => {
          "metric_type" => "process"
        }
      }
    }
  }

  # HTTP logs filter
  if [type] == "http" {
    # Parse HTTP request
    grok {
      match => { "message" => "%{COMBINEDAPACHELOG}" }
    }

    # Extract URL parameters
    if [request] {
      ruby {
        code => "
          require 'uri'
          begin
            uri = URI.parse(event.get('request'))
            params = URI.decode_www_form(uri.query || '')
            params.each do |key, value|
              event.set('url_params_' + key, value)
            end
          rescue => e
            event.set('url_parse_error', e.message)
          end
        "
      }
    }
  }

  # Syslog filter
  if [type] == "syslog" {
    # Parse syslog format
    grok {
      match => { "message" => "%{SYSLOGTIMESTAMP:syslog_timestamp} %{SYSLOGHOST:syslog_hostname} %{DATA:syslog_program}(?:\[%{POSINT:syslog_pid}\])?: %{GREEDYDATA:syslog_message}" }
    }

    # Parse timestamp
    date {
      match => [ "syslog_timestamp", "MMM dd HH:mm:ss" ]
      target => "@timestamp"
    }
  }
}

output {
  # Elasticsearch output
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "logs-%{+YYYY.MM.dd}"
    user => "${ELASTIC_USER}"
    password => "${ELASTIC_PASSWORD}"
    ssl_enabled => true
    ssl_certificate_verification => true
    ssl_certificate_authorities => ["/etc/logstash/certs/ca.crt"]
  }

  # Conditional output for errors
  if "error" in [tags] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "errors-%{+YYYY.MM.dd}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      ssl_enabled => true
      ssl_certificate_verification => true
      ssl_certificate_authorities => ["/etc/logstash/certs/ca.crt"]
    }
  }

  # Conditional output for metrics
  if [metric_type] {
    elasticsearch {
      hosts => ["elasticsearch:9200"]
      index => "metrics-%{+YYYY.MM.dd}"
      user => "${ELASTIC_USER}"
      password => "${ELASTIC_PASSWORD}"
      ssl_enabled => true
      ssl_certificate_verification => true
      ssl_certificate_authorities => ["/etc/logstash/certs/ca.crt"]
    }
  }

  # Debug output (only in development)
  if [environment] == "development" {
    stdout {
      codec => rubydebug
    }
  }
} 